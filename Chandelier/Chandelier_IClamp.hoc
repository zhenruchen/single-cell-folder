{load_file("nrngui.hoc")}
{load_file("class_chandelierWB.hoc")}
{load_file("class_axoaxoniccellmean.hoc")}

////// Function to compute input resistance //////
objref zz
zz = new Impedance()

func rn() { local rn
   init()  // make sure all changes to g, c, ri etc. have taken effect
   $o1.soma zz.loc(0.5)  // sets origin for impedance calculations to middle of soma
   zz.compute(0)  // DC input R
   $o1.soma { rn = zz.input(0.5) }  // rn is input R at middle of the soma
   return rn
}
///////////////////////////////////////////////////

//// Function to compute surface area
proc totalarea() { local sum
  sum = 0
  forall for(x,0) sum += area(x)
  forsec "soma" for(x,0) sum_soma += area(x)
  forsec "axon" for(x,0) sum_axon += area(x)
  forsec "dend" for(x,0) sum_dend += area(x)
  forsec "apic" for(x,0) sum_apic += area(x)
  print "total surface area = ", sum, " um2"
  print "soma surface area = ", sum_soma, " um2"
  print "axon surface area = ", sum_axon, " um2"
  print "dend surface area = ", sum_dend, " um2"
  print "apic surface area = ", sum_apic, " um2"
}


//This procedure creates an FI curve (current injection vs. frequency)
objref stim1,nc,spvec,FIfile,Cell,Section,numvec,ampvec,iinj,vol_vec,volfile		//define objects
strdef cmd

// Inputs: Cell object to be tuned, three integers specifying start,end, and interval of IClamp in nA.
// 			
// Outputs: file 
proc FIcurve(){local i,strt,stp localobj nil	
	//$o1 - cell object
	//$2 - start amplitude for IClamp in nA
	//$3 - stop amplitude for IClamp in nA
	//$4 - interval of amplitude for IClamp in nA
	FIfile = new File("./IClampModelData/PYR_C/FIdataPYR")
	FIfile.wopen() //Open and close to clear the contents
	FIfile.close()
	
	printf("Running FIR experiment. Please wait.\n")
	Cell = $o1
	
	Cell.soma[0] stim1 = new IClamp(0.5)
	Cell.soma[0] nc = new NetCon(&v(0.5),nil)
	stim1.del = 100 // in ms						//delay of the stim 
	stim1.dur = 500 // in ms						//duration of the stim
	
	stp = (($3*1000-$2*1000)/($4*1000)) + 1 // get how many steps to take
	
	numvec = new Vector(stp)
	ampvec = new Vector(stp)
	
	for i=1,stp{	
		spvec = new Vector()
		nc.record(spvec)
		stim1.amp =  $2+(i-1)*$4// in nA
		
		
		// Record voltage of soma and iinj
		vol_vec = new Vector()
		access Cell.soma[0]
		vol_vec.record(&v(0.5))
		
		init()
		run()
		
		// Create voltage file, then clear its contents
		sprint(cmd,"./IClampModelData/PYR_C/currentinj%d",i)
		volfile = new File(cmd)
		volfile.wopen()
		volfile.close()
		
		//Save frequency and current in a file and a vector
		numvec.x[i-1]=spvec.size
		ampvec.x[i-1]=($2+(i-1)*$4)
		
		FIfile.aopen()                      //"aopen" to append data
		FIfile.printf("%f\t %f\n", $2+(i-1)*$4, spvec.size()/(stim1.dur/1000)) // divide by stim1dur to get frequency
		FIfile.close()
		
		// Save voltage into the file
		volfile.aopen()
		vol_vec.printf(volfile)
		volfile.close()
		
		printf("iteration %d of %d done\n",i,stp)
	}
	
}

objref r
proc PopMatrix(){localobj mat, bm
	//$o1 should be matrix to be populated
	mat = $o1
	bm = $o2
	r = new Random(12888)
	for i=0,mat.nrow-1{
		for j =0,mat.ncol-2{
			mat.x[i][j] = r.uniform(bm.x[0][j],bm.x[1][j])//gNav_soma
		}
	}
	
}

proc AssignCondandRun(){localobj cell,mat,tgt,vec1,vec2
	// Here we read conductances from the matrix and assign them to the cell
	cell = $o1
	mat = $o2
	tgt = $o4
	
	for i=0,$3-1{
		// assign the conductances. 
		printf("running iteration %d\n",i+1)
		cell.soma.gnabar_nainter = mat.x[i][0]//cell.soma.gnabar_nainter = mat.x[i][0]
		cell.soma.gbar_nap = mat.x[i][2]
		cell.soma.gkdrbar_kdrinter = mat.x[i][4]
		cell.soma.gmax_ch_CavN = mat.x[i][6]
		cell.soma.gmax_ch_CavL = mat.x[i][8]
		
		for n=0,3{cell.dend[n].gnabar_nainter = mat.x[i][1]}
		for n=0,3{cell.dend[n].gbar_nap = mat.x[i][3]}
		for n=0,3{cell.dend[n].gkdrbar_kdrinter = mat.x[i][5]}
		for n=0,3{cell.dend[n].gmax_ch_CavN = mat.x[i][7]}
		for n=0,3{cell.dend[n].gmax_ch_CavL = mat.x[i][9]}
		
		FIcurve(cell,-0.06,0.36,0.03)
		vec1 = new Vector()
		vec2 = new Vector()
		vec1.where(numvec,"==",0)
		vec2.where(tgt,"==",0)
		print "vec1:", vec1.size, "vec2: ",vec2.size
		if (vec1.size==vec2.size){
			mat.x[i][10] = tgt.meansqerr(numvec)
		}else{
			mat.x[i][10] = tgt.meansqerr(numvec) + 1000 // penalize for threshold being wrong
		}
	}
}

// Add current clamp
objref ccl[2]
proc ConnectCClamp(){
	$o1.soma ccl[$2] = new IClamp(.5)
	ccl[$2].del = 500
	ccl[$2].dur = 1
	ccl[$2].amp = 1
}


objref Chn2PyrSyn[11], Chn2PyrNC[11], stim[11], vclamp[12]
proc ConnectNetStimtoAISsegs(){ local i
objref Chn2PyrSyn[11], Chn2PyrNC[11], stim[11], vclamp[12]

// Make netstim to provide spikes
	for i=0,0{
		stim[i] = new NetStim()
		stim[i].interval = 4 //(ms)
		stim[i].number = 1
		stim[i].start = 100+150*i //(ms)
		stim[i].noise = 0
		
		$o1.soma[0] Chn2PyrSyn[i]= new MyExp2Sid(0.5)
		Chn2PyrSyn[i].tau1 = 0.88
		Chn2PyrSyn[i].tau2 = 2.3
		Chn2PyrSyn[i].e = 0

		Chn2PyrNC[i] = new NetCon(stim[i], Chn2PyrSyn[i])
		Chn2PyrNC[i].delay = 0
		Chn2PyrNC[i].weight = .009 //With MyExp2Sid, NC weight of 1 is a peak conductance of 1.
	}
	/*
	access CellA.soma
	vclamp[0] = new SEClamp(0.5)
	vclamp[0].rs = .01 // Mohm:series resistance should be much smaller than input resistance of the cell
	vclamp[0].dur1 = 0
	vclamp[0].amp1 = 0
	vclamp[0].dur2 = tstop
	vclamp[0].amp2 = 0
	vclamp[0].dur3 = 0
	vclamp[0].amp3 = 0
	
	for i=9,9{
		access CellA.axon[i]
		vclamp[i] = new SEClamp(0.5)
		vclamp[i].rs = .1 // Mohm:series resistance should be much smaller than input resistance of the cell
		vclamp[i].dur1 = 0
		vclamp[i].amp1 = 0
		vclamp[i].dur2 = tstop
		vclamp[i].amp2 = 0
		vclamp[i].dur3 = 0
		vclamp[i].amp3 = 0
	}
	*/
}
/////////////////////////////////////////////////////////////////////////////
////////////////////// MAIN /////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////


tstop = 200
v_init = -70
V_rest = -70

objref Cell1 // declare neuron object
Cell1 = new chandelierWB() // build neuron from template

print "-----Stylized-----\n"
print "Input resistance: ", rn(Cell1), "Megaohms"
totalarea()

/*
objref Cell2
Cell2 = new Henckens_PyrAMC1A()

print "-----Detailed-----\n"
print "Input resistance: ", rn(Cell2), "Megaohms"
totalarea()
*/

//ConnectCClamp(Cell1,0)
//ConnectCClamp(Cell2,1)
ConnectNetStimtoAISsegs(Cell1)
//ConnectNetStimtoAISsegs(Cell2)

